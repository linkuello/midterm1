Пункт 1: "Что это за зверь и что он нам дает?"
Git позволяет работать над кодом одновременно нескольким участникам проекта и иметь постоянно наиболее актуальную его версию. Также она дает возможность проследить, кем, когда и какие изменения были сделаны в проекте.

Кроме того данная технология позволяет делать ветвистую структуру проекта. Как правило, никогда напрямую не редактируется головная ветка проекта, а каждый разработчик(как-вариант группа) имеет личную ветку, которая впоследствии вливается в основную.

Описывать установку или настройку Git не вижу смысла, ибо на эту тему уже есть множество гайдов, инструкций и пр. Следовательно, переходим сразу к использованию установленной версии.

Пункт 2: "А как этим вообще пользоваться?"
Лично я использую консольную версию, так как ней я привык. Поэтому я буду писать именно про нее, но если вы разберетесь, то вам не составит труда разобраться и в GUI версии.

Первая (и самая главная) команда, которую необходимо знать :

git help

Что-то мне кажется, что она в представлении не нуждается, но на всякий случай оговорюсь, что она выводит список всех команд с кратким описанием.

Для получения справки по определенной команде необходимо ввести ее после git help, то есть команда

git help push

открывает в браузере страницу с полной информацией по команде push.

Для создания локального репозитория используется следующая связка команд:

cd <путь в вашу рабочую папку>

git init

С подключением к удаленному репозиторию сложнее. Разберем для примера случай с GitHub. Синтаксис команды следующий:

git clone <адрес репозитория>

Получить адрес репозитория можно по большой зеленой кнопке Code непосредственно на странице репозитория на GitaHub.

Для обновления всех веток репозитория сразу используется:

git pull

А при необходимости обновить определенную ветку :

git pull origin <название ветки>

Ветка создаётся командой:

git branch <название ветки>

Для переключения между ними используется:

git checkout <название ветки>

Отлично, теперь вы знаете, как подключится к репозиторию, создать ветку, подгрузить актуальную версию репозитория. Осталось разобраться, как загружать в него собственный код.

Для этого необходимо, чтобы вы находились в папке проекта. Если это не так, то исправляем:

cd <путь в вашу рабочую папку>

Далее готовим содержимое к команде commit:

git add .

" . " в данном случае обозначает, что мы добавляем все содержимое папки.

И, наконец, создаем commit :

git commit -m "<обязательно комментарий>"

Важная оговорка: commit не надо проводить после каждой написанной строчки кода, а только если:

вы добавили новую фичу

вы исправили ошибку

вы завершаете рабочий день и хотите сохранить код

Пункт 3: Заключение
В данной статье я попытался передать основную часть практической стороны Git.Для более полного ознакомления оставляю ссылки на упомянутую выше статью:

Часть 1

Часть 2

Буду рад любой конструктивной критике. Спасибо за прочтение.